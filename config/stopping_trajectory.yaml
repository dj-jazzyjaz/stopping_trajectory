hod_threshold:
  vel: 50
  acc: 10
  jerk: 200
  snap: 500
cost_function:  # Weights for computing cost of escape points
  vel_deviation_weight: 0.7  # Make larger to penalize deviation from current velocity vector
  obstacle_dist_weight: 0.3  # Make larger to reward distance from obstacle
collision_radius: 0.2 # Used for checking collision of points on trajectories
command_stop:
  stopping_radius: 0.3 # Minimum stopping radius
  bias: 0.3 # Make larger to stop earlier (i.e., more likely to stop given current conditions).
  dist_weight: 0.6 # Make larger to reward high distance from obstacle.
  angle_weight: 1.2 # Make larger to reward a large angle seperate between vehicle's current heading and direction of nearest obstacle
  vel_weight: 0.2 # Make larger to penalize high velocities.
escape_point_generation:
  grid_length: 1 # Scale of sample space length, which is based on velocity norm
  grid_width: 1 # Scale sample space width, TODO IMPROVE THIS COMMENT
  sample_length: 0.3 # discretization interval of points to sample
  sample_width: 0.3  # discretization interval of points to sample
  sample_height: 0.3
sample_method: 2 # 0=none, 1=weighted random, 2=stratified, 3=best n
sample_num: 100 # number of points to keep after sampling, to generate trajectories to
stratified_sample:
  sample_fraction: [0.01, 0.09, 0.4, 0.5] # percent of points for each strata, ordered highest to lowest strata. Should sum to 1.
  sample_num: [10, 40, 30, 20] # max number of points to sample from each strata
compute_thresh: 0.01 # do not attempt computing escape points if vehicle velocity is below this threshold
log: 0 # 0 for should not log, 1 otherwise

debug:
  verbose: false # determine how much information to print to console
stopping:
  publish_hover_after_stop: true # determine whether to publish a hover to FSM after stopping
map_scope: local # one of {local, global}
